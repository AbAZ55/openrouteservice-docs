---
swagger: "2.0"
info:
  description: "This is the documentation for the OpenRouteService API."
  version: "4.0.0"
  title: "OpenRouteService API"
  contact:
    email: "openrouteservice@geog.uni-heidelberg.de"
  license:
    name: "MIT"
    url: "https://github.com/swagger-api/swagger-ui/blob/master/LICENSE"
host: "api.openrouteservice.org"
schemes:
- "https"
produces:
- "text/json; charset=utf-8"
security:
- UserSecurity: []
paths:
  /directions:
    get:
      summary: "Routing Service"
      description: "Returns a route between two or more locations for a selected profile\
        \ and its settings as GeoJSON response.\n"
      parameters:
      - name: "coordinates"
        in: "query"
        description: "Pipe separated List of longitude,latitude coordinates visited\
          \ in order."
        required: true
        type: "array"
        items:
          type: "string"
          format: "longitude,latitude"
        collectionFormat: "pipes"
      - name: "profile"
        in: "query"
        description: "Specifies the route profile."
        required: true
        type: "string"
        enum:
        - "driving-car"
        - "driving-hgv"
        - "cycling-regular"
        - "cycling-road"
        - "cycling-safe"
        - "cycling-mountain"
        - "cycling-tour"
        - "cycling-electric"
        - "foot-walking"
        - "foot-hiking"
        - "wheelchair"
      - name: "preference"
        in: "query"
        description: "Specifies the route preference."
        required: false
        type: "string"
        default: "fastest"
        enum:
        - "fastest"
        - "shortest"
        - "recommended"
      - name: "units"
        in: "query"
        description: "Specifies the distance unit."
        required: false
        type: "string"
        default: "m"
        enum:
        - "m"
        - "km"
        - "mi"
      - name: "language"
        in: "query"
        description: "Language for the route instructions."
        required: false
        type: "string"
        default: "en"
        enum:
        - "cn"
        - "de"
        - "en"
        - "es"
        - "ru"
      - name: "geometry"
        in: "query"
        description: "Specifies whether to return geometry."
        required: false
        type: "boolean"
        default: true
        enum:
        - "true"
        - "false"
      - name: "geometry_format"
        in: "query"
        description: "Sets the format of the returned geometry."
        required: false
        type: "string"
        default: "encodedpolyline"
        enum:
        - "encodedpolyline"
        - "geojson"
        - "polyline"
      - name: "geometry_simplify"
        in: "query"
        description: "Specifies whether to simplify the geometry. `True` will automatically\
          \ be set to `False` if `extra_info` parameter is specified."
        required: false
        type: "boolean"
        default: false
        format: "double"
        enum:
        - "true"
        - "false"
      - name: "instructions"
        in: "query"
        description: "Specifies whether to return instructions."
        required: false
        type: "boolean"
        default: true
        enum:
        - "true"
        - "false"
      - name: "instructions_format"
        in: "query"
        description: "Select `html` for more verbose instructions."
        required: false
        type: "string"
        default: "text"
        enum:
        - "html"
        - "text"
      - name: "elevation"
        in: "query"
        description: "Specifies whether to return elevation values for points."
        required: false
        type: "boolean"
        default: false
        enum:
        - "true"
        - "false"
      - name: "extra_info"
        in: "query"
        description: "Pipe separated List of additional information."
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "steepness"
          - "suitability"
          - "surface"
          - "waycategory"
          - "waytype"
        collectionFormat: "pipes"
        uniqueItems: true
      - name: "options"
        in: "query"
        description: "For advanced options formatted as json object. For structure\
          \ refer to the **options model** below."
        required: false
        type: "string"
      - name: "id"
        in: "query"
        description: "Arbitrary identification string of the request reflected in\
          \ the meta information."
        required: false
        type: "string"
      responses:
        200:
          description: "Standard response for successfully processed requests. Returns\
            \ JSON."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Routeresponse"
        400:
          description: "The request is incorrect and therefore can not be processed."
          schema:
            $ref: "#/definitions/error"
        401:
          description: "Authorization field missing."
        405:
          description: "The specified HTTP method is not supported. For more details,\
            \ refer to the EndPoint documentation."
        413:
          description: "The request is larger than the server is able to process,\
            \ the data provided in the request exceeds the capacity limit."
        500:
          description: "An unexpected error was encountered and more detailed internal\
            \ error\ncode is provided.\n\n| Internal Code | Description          \
            \                              |\n|:-------------:|----------------------------------------------------|\n\
            |      200      | Unable to parse JSON request.                      |\n\
            |      201      | Required parameter is missing.                     |\n\
            |      202      | Invalid parameter format.                          |\n\
            |      203      | Invalid parameter value.                           |\n\
            |      204      | Parameter value exceeds the maximum allowed limit. |\n\
            |      299      | Unknown internal error.                            |\n"
        501:
          description: "Indicates that the server does not support the functionality\
            \ needed to fulfill the request."
        503:
          description: "The server is currently unavailable due to overload or maintenance."
  /geocoding:
    get:
      summary: "Geocoding Service"
      description: "Returns a JSON formatted list of objects corresponding to the\
        \ search input.\n"
      parameters:
      - name: "query"
        in: "query"
        description: "Name of location, street address or postal code."
        required: true
        type: "string"
      - name: "lang"
        in: "query"
        description: "Sets the language of the response."
        required: false
        type: "string"
        default: "en"
        enum:
        - "de"
        - "en"
        - "fr"
        - "it"
      - name: "limit"
        in: "query"
        description: "Specifies the maximum number of responses."
        required: false
        type: "number"
        default: 20
        format: "double"
      - name: "id"
        in: "query"
        description: "Arbitrary identification string of the request reflected in\
          \ the meta information."
        required: false
        type: "string"
      responses:
        200:
          description: "Standard response for successfully processed requests. Returns\
            \ JSON."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Geocoderesponse"
        400:
          description: "The request is incorrect and therefore can not be processed."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/error"
        401:
          description: "Authorization field missing."
        405:
          description: "The specified HTTP method is not supported. For more details,\
            \ refer to the EndPoint documentation."
        413:
          description: "The request is larger than the server is able to process,\
            \ the data provided in the request exceeds the capacity limit."
        500:
          description: "An unexpected error was encountered and more detailed internal\
            \ error\ncode is provided.\n\n| Internal Code | Description          \
            \                              |\n|:-------------:|----------------------------------------------------|\n\
            |      100      | Unable to parse JSON request.                      |\n\
            |      101      | Required parameter is missing.                     |\n\
            |      102      | Invalid parameter format.                          |\n\
            |      103      | Invalid parameter value.                           |\n\
            |      104      | Parameter value exceeds the maximum allowed limit. |\n\
            |      199      | Unknown internal error.                            |\n"
        501:
          description: "Indicates that the server does not support the functionality\
            \ needed to fulfill the request."
        503:
          description: "The server is currently unavailable due to overload or maintenance."
  /geocoding (reverse):
    get:
      summary: "Reverse Geocoding Service"
      description: "Returns the next enclosing object with an address tag which surrounds\
        \ the given coordinate.\n"
      parameters:
      - name: "location"
        in: "query"
        description: "Coordinate to be inquired."
        required: true
        type: "number"
        format: "longitude,latitude"
      - name: "lang"
        in: "query"
        description: "Sets the language of the response."
        required: false
        type: "string"
        default: "en"
        enum:
        - "de"
        - "en"
        - "fr"
        - "it"
      - name: "id"
        in: "query"
        description: "Arbitrary identification string of the request reflected in\
          \ the meta information."
        required: false
        type: "string"
      responses:
        200:
          description: "Standard response for successfully processed requests. Returns\
            \ JSON."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Reversegeocoderesponse"
        400:
          description: "The request is incorrect and therefore can not be processed."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/error"
        401:
          description: "Authorization field missing."
        405:
          description: "The specified HTTP method is not supported. For more details,\
            \ refer to the EndPoint documentation."
        413:
          description: "The request is larger than the server is able to process,\
            \ the data provided in the request exceeds the capacity limit."
        500:
          description: "An unexpected error was encountered and more detailed internal\
            \ error\ncode is provided.\n\n| Internal Code | Description          \
            \                              |\n|:-------------:|----------------------------------------------------|\n\
            |      100      | Unable to parse JSON request.                      |\n\
            |      101      | Required parameter is missing.                     |\n\
            |      102      | Invalid parameter format.                          |\n\
            |      103      | Invalid parameter value.                           |\n\
            |      104      | Parameter value exceeds the maximum allowed limit. |\n\
            |      199      | Unknown internal error.                            |\n"
        501:
          description: "Indicates that the server does not support the functionality\
            \ needed to fulfill the request."
        503:
          description: "The server is currently unavailable due to overload or maintenance."
  /isochrones:
    get:
      summary: "Isochrones Service"
      description: "The Isochrone Service supports time and distance analyses for\
        \ one single or multiple locations. You may also specify the isochrone interval\
        \ or provide multiple exact isochrone range values. This service allows the\
        \ same range of profile options listed in the ORS Routing section which help\
        \ you to further customize your request to obtain a more detailed reachability\
        \ area response.\n"
      parameters:
      - name: "locations"
        in: "query"
        description: "List of longitude, latitude coordinates delimited with pipe.\n"
        required: true
        type: "number"
        format: "longitude,latitude"
      - name: "profile"
        in: "query"
        description: "Specifies the routing profile."
        required: false
        type: "string"
        default: "driving-car"
        enum:
        - "driving-car"
        - "driving-hgv"
        - "cycling-regular"
        - "cycling-road"
        - "cycling-safe"
        - "cycling-mountain"
        - "cycling-tour"
        - "foot-walking"
        - "foot-hiking"
      - name: "range_type"
        in: "query"
        description: "Set _time_ for isochrones or _distance_ for equidistants.\n"
        required: false
        type: "string"
        default: "time"
      - name: "range"
        in: "query"
        description: "Maximum range value of the analysis in seconds for time and\
          \ meters for distance. Alternatively a comma separated list of specific\
          \ single range values.\n"
        required: true
        type: "number"
        format: "double"
      - name: "interval"
        in: "query"
        description: "Interval of isochrones or equidistants for one range value.\
          \ value in seconds for time and meters for distance.\n"
        required: false
        type: "number"
        format: "double"
      - name: "units"
        in: "query"
        description: "Unit format.\n"
        required: false
        type: "string"
        default: "m"
        enum:
        - "m"
        - "km"
        - "mi"
        - "s"
      - name: "location_type"
        in: "query"
        description: "start(default) treats the location(s) as starting point, destination\
          \ as goal.\n"
        required: false
        type: "string"
        default: "start"
        enum:
        - "start"
        - "destination"
      - name: "attributes"
        in: "query"
        description: "Values are area and reachfactor. Delimit with pipe for both.\n"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "area"
          - "reachfactor"
        collectionFormat: "pipes"
        uniqueItems: true
      - name: "options"
        in: "query"
        description: "For advanced options formatted as JSON. Add object as string:\
          \ \"{...}\".\n"
        required: false
        type: "string"
      - name: "intersections"
        in: "query"
        description: "Specifies whether to return intersection polygons.\n"
        required: false
        type: "boolean"
        default: false
      - name: "id"
        in: "query"
        description: "Arbitrary identification string of the request reflected in\
          \ the meta information."
        required: false
        type: "string"
      responses:
        200:
          description: "Standard response for successfully processed requests. Returns\
            \ JSON."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IsochronesResponse"
        400:
          description: "The request is incorrect and therefore can not be processed."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/error"
        401:
          description: "Authorization field missing."
        403:
          description: "Access to this API has been disallowed."
        405:
          description: "The specified HTTP method is not supported. For more details,\
            \ refer to the EndPoint documentation."
        413:
          description: "The request is larger than the server is able to process,\
            \ the data provided in the request exceeds the capacity limit."
        500:
          description: "An unexpected error was encountered and more detailed internal\
            \ error\ncode is provided.\n\n| Internal Code | Description          \
            \                              |\n|:-------------:|----------------------------------------------------|\n\
            |      300      | Unable to parse JSON request.                      |\n\
            |      301      | Required parameter is missing.                     |\n\
            |      302      | Invalid parameter format.                          |\n\
            |      303      | Invalid parameter value.                           |\n\
            |      304      | Parameter value exceeds the maximum allowed limit. |\n\
            |      305      | PRequested feature is not supported.               |\n\
            |      399      | Unknown internal error.                            |\n"
        501:
          description: "Indicates that the server does not support the functionality\
            \ needed to fulfill the request."
        503:
          description: "The server is currently unavailable due to overload or maintenance."
  /places:
    get:
      summary: "Location Service"
      description: "Returns Points of Interest in the area surrounding a geometry.\
        \ Use the post endpoint for requests that exceed the get character limit.\n"
      parameters:
      - name: "request"
        in: "query"
        description: "`pois` will return POI geometry as well as requested details.\
          \ `category_stats` returns a POI count for each requested category. `category_list`\
          \ returns a list of all categories. (only the id parameter will be considered)\n"
        required: true
        type: "string"
        enum:
        - "pois"
        - "category_stats"
        - "category_list"
      - name: "category_group_ids"
        in: "query"
        description: "Comma seperated list of category group ids.\n"
        required: false
        type: "string"
      - name: "category_ids"
        in: "query"
        description: "Comma seperated list of category ids.\n"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "Name to filter the POIs by.\n"
        required: false
        type: "string"
      - name: "wheelchair"
        in: "query"
        description: "Filter returned features by wheelchair tag entries.\n"
        required: false
        type: "string"
        enum:
        - "true"
        - "false"
        - "limited"
      - name: "smoking"
        in: "query"
        description: "Filter returned features by wheelchair tag entries.\n"
        required: false
        type: "string"
        enum:
        - "true"
        - "false"
      - name: "fee"
        in: "query"
        description: "Filter returned features by fee tag entries.\n"
        required: false
        type: "string"
        enum:
        - "true"
        - "false"
      - name: "bbox"
        in: "query"
        description: "Defines a clipping bounding box\n"
        required: false
        type: "array"
        items:
          type: "number"
          format: "double"
        collectionFormat: "csv"
        maxItems: 4
        minItems: 4
      - name: "geometry"
        in: "query"
        description: "GeoJSON geometry object (Point, Linestring or Polygon)\n"
        required: false
        type: "string"
      - name: "radius"
        in: "query"
        description: "Search radius in meters around the given (might be limited in\
          \ the backend)\n"
        required: true
        type: "number"
        maximum: 1000
        minimum: 0
        format: "double"
      - name: "limit"
        in: "query"
        description: "Maximum number of returned objects (might be limited in the\
          \ backend)\n"
        required: false
        type: "integer"
        format: "int64"
      - name: "sortby"
        in: "query"
        description: "Sorts the returned features by _distance_ or _category_.\n"
        required: false
        type: "string"
        enum:
        - "distance"
        - "category"
      - name: "details"
        in: "query"
        description: "Pipe seperated list of desired details.\n"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "address"
          - "contact"
          - "attributes"
        collectionFormat: "pipes"
        uniqueItems: true
      - name: "id"
        in: "query"
        description: "Arbitrary identification string of the request reflected in\
          \ the meta information."
        required: false
        type: "string"
      responses:
        200:
          description: "Standard response for successfully processed requests. Returns\
            \ JSON."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LocationsPoiResponse"
        400:
          description: "The request is incorrect and therefore can not be processed."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/error"
        401:
          description: "Authorization field missing."
        403:
          description: "Access to this API has been disallowed."
        405:
          description: "The specified HTTP method is not supported. For more details,\
            \ refer to the EndPoint documentation."
        413:
          description: "The request is larger than the server is able to process,\
            \ the data provided in the request exceeds the capacity limit."
        500:
          description: "An unexpected error was encountered and more detailed internal\
            \ error\ncode is provided.\n\n| Internal Code | Description          \
            \                              |\n|:-------------:|----------------------------------------------------|\n\
            |      400      | Unable to parse JSON request.                      |\n\
            |      401      | Required parameter is missing.                     |\n\
            |      402      | Invalid parameter format.                          |\n\
            |      403      | Invalid parameter value.                           |\n\
            |      404      | Parameter value exceeds the maximum allowed limit. |\n\
            |      499      | Unknown internal error.                            |\n"
        501:
          description: "Indicates that the server does not support the functionality\
            \ needed to fulfill the request."
        503:
          description: "The server is currently unavailable due to overload or maintenance."
    post:
      summary: "Location Service"
      description: "Returns Points of Interest in the area surrounding a geometry.\n"
      parameters:
      - in: "body"
        name: "body"
        description: "this is body"
        required: false
        schema:
          $ref: "#/definitions/body"
      responses:
        200:
          description: "Standard response for successfully processed requests. Returns\
            \ JSON."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LocationsPoiResponse"
        400:
          description: "The request is incorrect and therefore can not be processed."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/error"
        401:
          description: "Authorization field missing."
        403:
          description: "Access to this API has been disallowed."
        405:
          description: "The specified HTTP method is not supported. For more details,\
            \ refer to the EndPoint documentation."
        413:
          description: "The request is larger than the server is able to process,\
            \ the data provided in the request exceeds the capacity limit."
        500:
          description: "An unexpected error was encountered and more detailed internal\
            \ error\ncode is provided.\n\n| Internal Code | Description          \
            \                              |\n|:-------------:|----------------------------------------------------|\n\
            |      400      | Unable to parse JSON request.                      |\n\
            |      401      | Required parameter is missing.                     |\n\
            |      402      | Invalid parameter format.                          |\n\
            |      403      | Invalid parameter value.                           |\n\
            |      404      | Parameter value exceeds the maximum allowed limit. |\n\
            |      499      | Unknown internal error.                            |\n"
        501:
          description: "Indicates that the server does not support the functionality\
            \ needed to fulfill the request."
        503:
          description: "The server is currently unavailable due to overload or maintenance."
securityDefinitions:
  UserSecurity:
    description: "Add your API Key as the value of the *api_key* parameter to your\
      \ GET\nrequest. (In this Demo you can click the Authentication Button.)\n"
    type: "apiKey"
    name: "api_key"
    in: "query"
definitions:
  options:
    type: "object"
    properties:
      maximum_speed:
        type: "integer"
        format: "int64"
      avoid_features:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
          enum:
          - "highways"
          - "tollways"
          - "ferries"
          - "tunnels"
          - "pavedroads"
          - "unpavedroads"
          - "tracks"
          - "fords"
          - "steps"
          - "hills"
      vehicle_type:
        type: "string"
        description: "Parameter for the driving-hgv Profile"
        enum:
        - "hgv"
        - "bus"
        - "agricultural"
        - "foresty"
        - "goods"
        - "delivery"
        default: "hgv"
      profile_params:
        $ref: "#/definitions/options_profile_params"
      avoid_polygons:
        $ref: "#/definitions/options_avoid_polygons"
  Routeresponse:
    properties:
      routes:
        type: "array"
        items:
          $ref: "#/definitions/Routeresponse_routes"
      info:
        $ref: "#/definitions/Routeresponse_info"
    title: "Route Response Object"
  Routeresponse_routes:
    properties:
      summary:
        $ref: "#/definitions/routes_summary"
      bbox:
        type: "array"
        description: "TBD"
        items:
          type: "number"
          format: "double"
        maxItems: 4
        minItems: 4
      geometry:
        type: "string"
        description: "TBD"
      segments:
        type: "array"
        description: "TBD"
        items:
          $ref: "#/definitions/segments"
        maxItems: 1
      way_points:
        type: "array"
        description: "TBD"
        items:
          type: "integer"
          format: "int64"
        maxItems: 2
        minItems: 2
    title: "routes object"
  routes_summary:
    properties:
      duration:
        type: "number"
        format: "double"
        description: "TBD"
      distance_actual:
        type: "number"
        format: "double"
        description: "TBD"
      distance:
        type: "number"
        format: "double"
        description: "TBD"
    title: "summary object"
    description: "TBD"
  segments:
    properties:
      duration:
        type: "number"
        format: "double"
        description: "TBD"
      distance:
        type: "number"
        format: "double"
        description: "TBD"
      steps:
        type: "array"
        description: "TBD"
        items:
          $ref: "#/definitions/steps"
    title: "segments object"
    description: "TBD"
  steps:
    properties:
      duration:
        type: "number"
        format: "double"
        description: "TBD"
      distance:
        type: "number"
        format: "double"
        description: "TBD"
      instruction:
        type: "string"
        description: "TBD"
      name:
        type: "string"
        description: "TBD"
      type:
        type: "integer"
        format: "int64"
      way_points:
        type: "array"
        description: "TBD"
        items:
          type: "integer"
          format: "int64"
        maxItems: 2
        minItems: 2
    title: "steps object"
  Routeresponse_info:
    properties:
      service:
        type: "string"
        description: "TBD"
      query:
        $ref: "#/definitions/Routeresponse_info_query"
      attribution:
        type: "string"
      version:
        type: "string"
      timestamp:
        type: "integer"
        format: "int64"
    title: "info object"
    description: "TBD"
  Routeresponse_info_query:
    required:
    - "coordinates"
    - "geometry_format"
    - "profile"
    properties:
      geometry_format:
        type: "string"
      profile:
        type: "string"
      coordinates:
        type: "array"
        items:
          type: "array"
          items:
            type: "number"
            format: "double"
          maxItems: 2
          minItems: 2
        minItems: 2
    title: "query object"
    description: "TBD"
  Geocoderesponse:
    properties:
      features:
        type: "array"
        items:
          $ref: "#/definitions/Geocoderesponse_features"
      bbox:
        type: "array"
        description: "TBD"
        items:
          type: "number"
          format: "double"
        maxItems: 4
        minItems: 4
      type:
        type: "string"
      info:
        $ref: "#/definitions/Geocoderesponse_info"
    title: "Geocode Response Object"
  Geocoderesponse_features:
    properties:
      geometry:
        $ref: "#/definitions/Geocoderesponse_geometry"
      type:
        type: "string"
      properties:
        $ref: "#/definitions/Geocoderesponse_properties"
    title: "features object"
  Geocoderesponse_geometry:
    properties:
      coordinates:
        type: "array"
        items:
          type: "number"
          format: "double"
          description: "TBD"
        maxItems: 2
        minItems: 2
      type:
        type: "string"
    title: "geometry object"
    description: "TBD"
  Geocoderesponse_properties:
    properties:
      country:
        type: "string"
      street:
        type: "string"
      name:
        type: "string"
      house_number:
        type: "string"
      state:
        type: "string"
      postal_code:
        type: "string"
    title: "porperties object"
  Geocoderesponse_info:
    properties:
      service:
        type: "string"
      query:
        $ref: "#/definitions/Geocoderesponse_info_query"
      attribution:
        type: "string"
      version:
        type: "string"
      timestamp:
        type: "integer"
        format: "int64"
    title: "info object"
  Geocoderesponse_info_query:
    properties:
      query:
        type: "string"
      limit:
        type: "integer"
        format: "int64"
    title: "query object"
  Reversegeocoderesponse:
    properties:
      type:
        type: "string"
        default: "FeatureCollection"
      features:
        type: "array"
        items:
          $ref: "#/definitions/Reversegeocoderesponse_features"
      bbox:
        type: "array"
        description: "TBD"
        items:
          type: "number"
          format: "double"
        maxItems: 4
        minItems: 4
      info:
        $ref: "#/definitions/Reversegeocoderesponse_info"
    title: "Reverse Geocode Response Object"
  Reversegeocoderesponse_features:
    properties:
      type:
        type: "string"
        default: "Feature"
      geometry:
        $ref: "#/definitions/Reversegeocoderesponse_geometry"
      properties:
        $ref: "#/definitions/Reversegeocoderesponse_properties"
    title: "features object"
  Reversegeocoderesponse_geometry:
    properties:
      type:
        type: "string"
        default: "Point"
      coordinates:
        type: "array"
        items:
          type: "number"
          format: "double"
        maxItems: 2
        minItems: 2
    title: "geometry object"
  Reversegeocoderesponse_properties:
    properties:
      country:
        type: "string"
      state:
        type: "string"
      city:
        type: "string"
      name:
        type: "string"
      distance:
        type: "string"
      confidence:
        type: "string"
    title: "porperties object"
  Reversegeocoderesponse_info:
    properties:
      service:
        type: "string"
        default: "geocoding"
      query:
        $ref: "#/definitions/Reversegeocoderesponse_info_query"
      attribution:
        type: "string"
      version:
        type: "string"
      timestamp:
        type: "integer"
        format: "int64"
    title: "info object"
  Reversegeocoderesponse_info_query:
    properties:
      limit:
        type: "integer"
        format: "int64"
      location:
        type: "array"
        items:
          type: "number"
          format: "double"
        maxItems: 2
        minItems: 2
    title: "query object"
  IsochronesResponse:
    type: "object"
    properties:
      features:
        type: "array"
        items:
          $ref: "#/definitions/IsochronesResponse_features"
      bbox:
        type: "array"
        items:
          type: "number"
          format: "double"
        maxItems: 4
        minItems: 4
      type:
        type: "string"
        default: "FeatureCollection"
      info:
        $ref: "#/definitions/IsochronesResponse_info"
    title: "Isochrones Response Object"
  IsochronesResponse_features:
    properties:
      geometry:
        $ref: "#/definitions/IsochronesResponse_geometry"
      type:
        type: "string"
        default: "Feature"
      properties:
        $ref: "#/definitions/IsochronesResponse_properties"
    title: "features object"
  IsochronesResponse_geometry:
    properties:
      coordinates:
        type: "array"
        items:
          type: "array"
          items:
            type: "number"
            format: "double"
      type:
        type: "string"
        default: "Polygon"
    title: "geometry object"
  IsochronesResponse_properties:
    properties:
      center:
        type: "array"
        items:
          type: "number"
          format: "double"
        maxItems: 2
        minItems: 2
      group_index:
        type: "integer"
        format: "int64"
      value:
        type: "integer"
        format: "int64"
    title: "porperties object"
  IsochronesResponse_info:
    properties:
      service:
        type: "string"
      query:
        $ref: "#/definitions/IsochronesResponse_info_query"
      attribution:
        type: "string"
      version:
        type: "string"
      timestamp:
        type: "integer"
        format: "int64"
    title: "info object"
  IsochronesResponse_info_query:
    properties:
      mode:
        type: "string"
      rangetype:
        type: "string"
      range:
        type: "integer"
        format: "int64"
      interval:
        type: "integer"
        format: "int64"
      locations:
        type: "array"
        items:
          type: "array"
          items:
            type: "number"
            format: "double"
    title: "query object"
  LocationsPoiResponse:
    type: "object"
    properties:
      type:
        type: "string"
        default: "FeatureCollection"
      features:
        type: "array"
        items:
          $ref: "#/definitions/location_features"
      bbox:
        type: "array"
        items:
          type: "number"
          format: "double"
        maxItems: 4
        minItems: 4
      info:
        $ref: "#/definitions/LocationsPoiResponse_info"
    title: "Places Poi Response Object"
  location_features:
    type: "object"
    properties:
      type:
        type: "string"
        default: "Feature"
      geometry:
        $ref: "#/definitions/location_features_geometry"
      properties:
        $ref: "#/definitions/location_features_properties"
    title: "features object"
  location_features_geometry:
    properties:
      type:
        type: "string"
        default: "Point"
      coordinates:
        type: "array"
        items:
          type: "number"
          format: "double"
        maxItems: 2
        minItems: 2
    title: "geometry object"
  location_features_properties:
    properties:
      osm_id:
        type: "string"
      category:
        type: "string"
      name:
        type: "string"
      address:
        type: "string"
      phone:
        type: "string"
      website:
        type: "string"
      opening_hours:
        type: "string"
      wheelchair:
        type: "string"
      distance:
        type: "string"
    title: "properties object"
  LocationsPoiResponse_info:
    properties:
      service:
        type: "string"
      version:
        type: "string"
      attribution:
        type: "string"
      timestamp:
        type: "integer"
        format: "int64"
      query:
        $ref: "#/definitions/LocationsPoiResponse_info_query"
    title: "info object"
  LocationsPoiResponse_info_query:
    properties:
      filter:
        $ref: "#/definitions/LocationsPoiResponse_info_query_filter"
      radius:
        type: "integer"
        format: "int64"
      limit:
        type: "integer"
        format: "int64"
    title: "query object"
  LocationsPoiResponse_info_query_filter:
    properties:
      category_group_ids:
        type: "array"
        items:
          type: "integer"
          format: "int64"
          example: 560
      catoegory_ids:
        type: "array"
        items:
          type: "integer"
          format: "int64"
          example: 561
    title: "filter object"
  body:
    properties:
      filter:
        $ref: "#/definitions/LocationsPoiResponse_info_query_filter"
      details:
        type: "string"
        example: "address|contact|attributes"
        enum:
        - "address"
        - "contact"
        - "attributes"
      limit:
        type: "integer"
        format: "int64"
      radius:
        type: "integer"
        format: "int64"
      sortby:
        type: "string"
        enum:
        - "category"
        - "distance"
      bbox:
        type: "string"
        example: "8.165339,47.265966,8.179995,49.214088"
        description: "The pattern for this bbox string is `\"minlon,minlat,maxlon,maxlat\"\
          `"
      geometry:
        $ref: "#/definitions/geometry"
    description: "**You have to specify at least one of** `bbox` **and** `geometry`\
      \ !\n"
  geometry:
    description: "The geometry can be either a Point , LineString or Polygon."
    example: "{type: LineString, coordinates:[[8.167426,49.272556],[8.167588,47.272445],[8.168082,47.272105],[8.168224,47.271917],[8.16831,47.271941],[8.168926,47.272216],[8.169054,47.272278],[8.169165,47.272186],[8.169256,47.272103],[8.16948,47.271921],[8.170129,47.271408],[8.170265,47.271295],[8.170701,47.27097],[8.171496,47.270485],[8.171796,47.270296]]}\n"
  error:
    properties:
      error:
        $ref: "#/definitions/error_error"
      info:
        $ref: "#/definitions/error_info"
    title: "STANDARD HTML ERROR"
  error_error:
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      fields:
        type: "string"
    title: "error object"
  error_info:
    properties:
      version:
        type: "string"
      timestamp:
        type: "integer"
        format: "int64"
    title: "info object"
  options_profile_params:
    properties:
      length:
        type: "number"
        format: "double"
      width:
        type: "number"
        format: "double"
      height:
        type: "number"
        format: "double"
      axleload:
        type: "number"
        format: "double"
      weight:
        type: "number"
        format: "double"
      hazmat:
        type: "boolean"
      difficulty_level:
        type: "integer"
        format: "int64"
        enum:
        - 0
        - 1
        - 2
        - 3
      maximum_gradient:
        type: "integer"
        format: "int64"
        minimum: 1
        maximum: 15
  options_avoid_polygons:
    properties:
      type:
        type: "string"
        default: "Polygon"
      coordinates:
        type: "array"
        items:
          type: "array"
          items:
            type: "number"
            format: "double"
          maxItems: 2
          minItems: 2
